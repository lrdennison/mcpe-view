#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec4 vertexPosition_modelspace;

// Notice that the "1" here equals the "1" in glVertexAttribPointer
// layout(location = 1) in vec3 vertexColor;

layout(location = 2) in vec2 vertexUV;
 
// Values that stay constant for the whole mesh.

uniform mat4 MVP;

// Output data ; will be interpolated for each fragment.
// out vec3 fragmentColor;
out vec2 UV;

 void main(){

    // gl_Position.xyz = vertexPosition_modelspace;
    // gl_Position.w = 1.0;

   // Output position of the vertex, in clip space : MVP * position

    // gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
    gl_Position =  MVP * vertexPosition_modelspace;
    
    // The color of each vertex will be interpolated
    // to produce the color of each fragment

    // fragmentColor = vertexColor;
    UV = vertexUV;
 }

